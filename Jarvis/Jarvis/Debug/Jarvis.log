Build started 15/4/2015 12:53:26 AM.
     1>Project "C:\Users\Gabriel\Documents\GitHub\main\Jarvis\Jarvis\Jarvis.vcxproj" on node 2 (Rebuild target(s)).
     1>ClCompile:
         C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\bin\CL.exe /c /IC:\Users\Gabriel\Documents\GitHub\main\Jarvis\Jarvis /IC:\Boost\1.57.0\VC\11.0 /ZI /nologo /W3 /WX- /Od /Oy- /D _MBCS /Gm /EHsc /RTC1 /MDd /GS /fp:precise /Zc:wchar_t /Zc:forScope /Fo"Debug\\" /Fd"Debug\vc120.pdb" /Gd /TP /analyze- /errorReport:prompt Add.cpp Clear.cpp CommandType.cpp Delete.cpp Display.cpp Done.cpp Log.cpp Logic.cpp Main.cpp parser.cpp RecurringTask.cpp Search.cpp Task.cpp UI.cpp Storage.cpp Undo.cpp Update.cpp WrongFormatCommand.cpp
         WrongFormatCommand.cpp
         Update.cpp
     1>c:\users\gabriel\documents\github\main\jarvis\jarvis\update.cpp(99): warning C4018: '<' : signed/unsigned mismatch
     1>c:\users\gabriel\documents\github\main\jarvis\jarvis\update.cpp(220): warning C4101: 'i' : unreferenced local variable
     1>c:\users\gabriel\documents\github\main\jarvis\jarvis\update.cpp(359): warning C4101: 'i' : unreferenced local variable
     1>c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility(2132): warning C4996: 'std::_Copy_impl': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility(2113) : see declaration of 'std::_Copy_impl'
                 c:\boost\1.57.0\vc\11.0\boost\algorithm\string\detail\classification.hpp(102) : see reference to function template instantiation '_OutIt std::copy<const char*,char*>(_InIt,_InIt,_OutIt)' being compiled
                 with
                 [
                     _OutIt=char *
         ,            _InIt=const char *
                 ]
                 c:\boost\1.57.0\vc\11.0\boost\algorithm\string\classification.hpp(206) : see reference to function template instantiation 'boost::algorithm::detail::is_any_ofF<char>::is_any_ofF<boost::iterator_range<const char *>>(const RangeT &)' being compiled
                 with
                 [
                     RangeT=boost::iterator_range<const char *>
                 ]
                 c:\boost\1.57.0\vc\11.0\boost\algorithm\string\classification.hpp(206) : see reference to function template instantiation 'boost::algorithm::detail::is_any_ofF<char>::is_any_ofF<boost::iterator_range<const char *>>(const RangeT &)' being compiled
                 with
                 [
                     RangeT=boost::iterator_range<const char *>
                 ]
                 c:\users\gabriel\documents\github\main\jarvis\jarvis\update.cpp(120) : see reference to function template instantiation 'boost::algorithm::detail::is_any_ofF<char> boost::algorithm::is_any_of<const char[2]>(RangeT (&))' being compiled
                 with
                 [
                     RangeT=const char [2]
                 ]
         Undo.cpp
         Storage.cpp
         UI.cpp
     1>c:\users\gabriel\documents\github\main\jarvis\jarvis\ui.cpp(100): warning C4101: 'defaultViewPrinted' : unreferenced local variable
     1>c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility(2132): warning C4996: 'std::_Copy_impl': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility(2113) : see declaration of 'std::_Copy_impl'
                 c:\boost\1.57.0\vc\11.0\boost\algorithm\string\detail\classification.hpp(102) : see reference to function template instantiation '_OutIt std::copy<std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>,char*>(_InIt,_InIt,_OutIt)' being compiled
                 with
                 [
                     _OutIt=char *
         ,            _InIt=std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>
                 ]
                 c:\boost\1.57.0\vc\11.0\boost\algorithm\string\classification.hpp(206) : see reference to function template instantiation 'boost::algorithm::detail::is_any_ofF<char>::is_any_ofF<boost::iterator_range<std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>>>(const RangeT &)' being compiled
                 with
                 [
                     RangeT=boost::iterator_range<std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>>
                 ]
                 c:\boost\1.57.0\vc\11.0\boost\algorithm\string\classification.hpp(206) : see reference to function template instantiation 'boost::algorithm::detail::is_any_ofF<char>::is_any_ofF<boost::iterator_range<std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>>>(const RangeT &)' being compiled
                 with
                 [
                     RangeT=boost::iterator_range<std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>>
                 ]
                 c:\users\gabriel\documents\github\main\jarvis\jarvis\ui.cpp(270) : see reference to function template instantiation 'boost::algorithm::detail::is_any_ofF<char> boost::algorithm::is_any_of<std::string>(const RangeT &)' being compiled
                 with
                 [
                     RangeT=std::string
                 ]
         Task.cpp
         Search.cpp
     1>c:\users\gabriel\documents\github\main\jarvis\jarvis\search.cpp(121): warning C4018: '<' : signed/unsigned mismatch
     1>c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility(2132): warning C4996: 'std::_Copy_impl': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility(2113) : see declaration of 'std::_Copy_impl'
                 c:\boost\1.57.0\vc\11.0\boost\algorithm\string\detail\classification.hpp(102) : see reference to function template instantiation '_OutIt std::copy<std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>,char*>(_InIt,_InIt,_OutIt)' being compiled
                 with
                 [
                     _OutIt=char *
         ,            _InIt=std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>
                 ]
                 c:\boost\1.57.0\vc\11.0\boost\algorithm\string\classification.hpp(206) : see reference to function template instantiation 'boost::algorithm::detail::is_any_ofF<char>::is_any_ofF<boost::iterator_range<std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>>>(const RangeT &)' being compiled
                 with
                 [
                     RangeT=boost::iterator_range<std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>>
                 ]
                 c:\boost\1.57.0\vc\11.0\boost\algorithm\string\classification.hpp(206) : see reference to function template instantiation 'boost::algorithm::detail::is_any_ofF<char>::is_any_ofF<boost::iterator_range<std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>>>(const RangeT &)' being compiled
                 with
                 [
                     RangeT=boost::iterator_range<std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>>
                 ]
                 c:\users\gabriel\documents\github\main\jarvis\jarvis\search.cpp(66) : see reference to function template instantiation 'boost::algorithm::detail::is_any_ofF<char> boost::algorithm::is_any_of<std::string>(const RangeT &)' being compiled
                 with
                 [
                     RangeT=std::string
                 ]
         RecurringTask.cpp
         parser.cpp
     1>c:\users\gabriel\documents\github\main\jarvis\jarvis\parser.cpp(37): warning C4018: '<' : signed/unsigned mismatch
     1>c:\users\gabriel\documents\github\main\jarvis\jarvis\parser.cpp(52): warning C4018: '<' : signed/unsigned mismatch
     1>c:\users\gabriel\documents\github\main\jarvis\jarvis\parser.cpp(65): warning C4018: '<' : signed/unsigned mismatch
     1>c:\users\gabriel\documents\github\main\jarvis\jarvis\parser.cpp(196): warning C4018: '<=' : signed/unsigned mismatch
     1>c:\users\gabriel\documents\github\main\jarvis\jarvis\parser.cpp(229): warning C4018: '<=' : signed/unsigned mismatch
     1>c:\users\gabriel\documents\github\main\jarvis\jarvis\parser.cpp(309): warning C4018: '<' : signed/unsigned mismatch
     1>c:\users\gabriel\documents\github\main\jarvis\jarvis\parser.cpp(322): warning C4018: '<' : signed/unsigned mismatch
     1>c:\users\gabriel\documents\github\main\jarvis\jarvis\parser.cpp(328): warning C4018: '<=' : signed/unsigned mismatch
     1>c:\users\gabriel\documents\github\main\jarvis\jarvis\parser.cpp(502): warning C4018: '<' : signed/unsigned mismatch
     1>c:\users\gabriel\documents\github\main\jarvis\jarvis\parser.cpp(505): warning C4018: '<=' : signed/unsigned mismatch
     1>c:\users\gabriel\documents\github\main\jarvis\jarvis\parser.cpp(703): warning C4018: '<=' : signed/unsigned mismatch
     1>c:\users\gabriel\documents\github\main\jarvis\jarvis\parser.cpp(883): warning C4018: '<=' : signed/unsigned mismatch
     1>c:\users\gabriel\documents\github\main\jarvis\jarvis\parser.cpp(984): warning C4018: '<' : signed/unsigned mismatch
     1>c:\users\gabriel\documents\github\main\jarvis\jarvis\parser.cpp(300): warning C4101: 'timedBy' : unreferenced local variable
     1>c:\users\gabriel\documents\github\main\jarvis\jarvis\parser.cpp(300): warning C4101: 'floating' : unreferenced local variable
     1>c:\users\gabriel\documents\github\main\jarvis\jarvis\parser.cpp(300): warning C4101: 'timedFrom' : unreferenced local variable
     1>c:\users\gabriel\documents\github\main\jarvis\jarvis\parser.cpp(1002): warning C4018: '<' : signed/unsigned mismatch
     1>c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility(2132): warning C4996: 'std::_Copy_impl': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility(2113) : see declaration of 'std::_Copy_impl'
                 c:\boost\1.57.0\vc\11.0\boost\algorithm\string\detail\classification.hpp(102) : see reference to function template instantiation '_OutIt std::copy<const char*,char*>(_InIt,_InIt,_OutIt)' being compiled
                 with
                 [
                     _OutIt=char *
         ,            _InIt=const char *
                 ]
                 c:\boost\1.57.0\vc\11.0\boost\algorithm\string\classification.hpp(206) : see reference to function template instantiation 'boost::algorithm::detail::is_any_ofF<char>::is_any_ofF<boost::iterator_range<const char *>>(const RangeT &)' being compiled
                 with
                 [
                     RangeT=boost::iterator_range<const char *>
                 ]
                 c:\boost\1.57.0\vc\11.0\boost\algorithm\string\classification.hpp(206) : see reference to function template instantiation 'boost::algorithm::detail::is_any_ofF<char>::is_any_ofF<boost::iterator_range<const char *>>(const RangeT &)' being compiled
                 with
                 [
                     RangeT=boost::iterator_range<const char *>
                 ]
                 c:\users\gabriel\documents\github\main\jarvis\jarvis\parser.cpp(50) : see reference to function template instantiation 'boost::algorithm::detail::is_any_ofF<char> boost::algorithm::is_any_of<const char[2]>(RangeT (&))' being compiled
                 with
                 [
                     RangeT=const char [2]
                 ]
         Main.cpp
     1>c:\users\gabriel\documents\github\main\jarvis\jarvis\main.cpp(7): warning C4101: 'ui' : unreferenced local variable
         Logic.cpp
     1>c:\users\gabriel\documents\github\main\jarvis\jarvis\logic.cpp(46): warning C4018: '<' : signed/unsigned mismatch
     1>c:\users\gabriel\documents\github\main\jarvis\jarvis\logic.cpp(53): warning C4018: '<' : signed/unsigned mismatch
     1>c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility(2132): warning C4996: 'std::_Copy_impl': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility(2113) : see declaration of 'std::_Copy_impl'
                 c:\boost\1.57.0\vc\11.0\boost\algorithm\string\detail\classification.hpp(102) : see reference to function template instantiation '_OutIt std::copy<const char*,char*>(_InIt,_InIt,_OutIt)' being compiled
                 with
                 [
                     _OutIt=char *
         ,            _InIt=const char *
                 ]
                 c:\boost\1.57.0\vc\11.0\boost\algorithm\string\classification.hpp(206) : see reference to function template instantiation 'boost::algorithm::detail::is_any_ofF<char>::is_any_ofF<boost::iterator_range<const char *>>(const RangeT &)' being compiled
                 with
                 [
                     RangeT=boost::iterator_range<const char *>
                 ]
                 c:\boost\1.57.0\vc\11.0\boost\algorithm\string\classification.hpp(206) : see reference to function template instantiation 'boost::algorithm::detail::is_any_ofF<char>::is_any_ofF<boost::iterator_range<const char *>>(const RangeT &)' being compiled
                 with
                 [
                     RangeT=boost::iterator_range<const char *>
                 ]
                 c:\users\gabriel\documents\github\main\jarvis\jarvis\logic.cpp(44) : see reference to function template instantiation 'boost::algorithm::detail::is_any_ofF<char> boost::algorithm::is_any_of<const char[2]>(RangeT (&))' being compiled
                 with
                 [
                     RangeT=const char [2]
                 ]
         Log.cpp
         Done.cpp
     1>c:\users\gabriel\documents\github\main\jarvis\jarvis\done.cpp(79): warning C4018: '<' : signed/unsigned mismatch
     1>c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility(2132): warning C4996: 'std::_Copy_impl': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility(2113) : see declaration of 'std::_Copy_impl'
                 c:\boost\1.57.0\vc\11.0\boost\algorithm\string\detail\classification.hpp(102) : see reference to function template instantiation '_OutIt std::copy<const char*,char*>(_InIt,_InIt,_OutIt)' being compiled
                 with
                 [
                     _OutIt=char *
         ,            _InIt=const char *
                 ]
                 c:\boost\1.57.0\vc\11.0\boost\algorithm\string\classification.hpp(206) : see reference to function template instantiation 'boost::algorithm::detail::is_any_ofF<char>::is_any_ofF<boost::iterator_range<const char *>>(const RangeT &)' being compiled
                 with
                 [
                     RangeT=boost::iterator_range<const char *>
                 ]
                 c:\boost\1.57.0\vc\11.0\boost\algorithm\string\classification.hpp(206) : see reference to function template instantiation 'boost::algorithm::detail::is_any_ofF<char>::is_any_ofF<boost::iterator_range<const char *>>(const RangeT &)' being compiled
                 with
                 [
                     RangeT=boost::iterator_range<const char *>
                 ]
                 c:\users\gabriel\documents\github\main\jarvis\jarvis\done.cpp(70) : see reference to function template instantiation 'boost::algorithm::detail::is_any_ofF<char> boost::algorithm::is_any_of<const char[2]>(RangeT (&))' being compiled
                 with
                 [
                     RangeT=const char [2]
                 ]
         Display.cpp
     1>c:\users\gabriel\documents\github\main\jarvis\jarvis\display.cpp(92): warning C4018: '<' : signed/unsigned mismatch
     1>c:\users\gabriel\documents\github\main\jarvis\jarvis\display.cpp(110): warning C4018: '<' : signed/unsigned mismatch
     1>c:\users\gabriel\documents\github\main\jarvis\jarvis\display.cpp(116): warning C4018: '<' : signed/unsigned mismatch
     1>c:\users\gabriel\documents\github\main\jarvis\jarvis\display.cpp(196): warning C4018: '<' : signed/unsigned mismatch
     1>c:\users\gabriel\documents\github\main\jarvis\jarvis\display.cpp(220): warning C4018: '<' : signed/unsigned mismatch
     1>c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility(2132): warning C4996: 'std::_Copy_impl': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility(2113) : see declaration of 'std::_Copy_impl'
                 c:\boost\1.57.0\vc\11.0\boost\algorithm\string\detail\classification.hpp(102) : see reference to function template instantiation '_OutIt std::copy<const char*,char*>(_InIt,_InIt,_OutIt)' being compiled
                 with
                 [
                     _OutIt=char *
         ,            _InIt=const char *
                 ]
                 c:\boost\1.57.0\vc\11.0\boost\algorithm\string\classification.hpp(206) : see reference to function template instantiation 'boost::algorithm::detail::is_any_ofF<char>::is_any_ofF<boost::iterator_range<const char *>>(const RangeT &)' being compiled
                 with
                 [
                     RangeT=boost::iterator_range<const char *>
                 ]
                 c:\boost\1.57.0\vc\11.0\boost\algorithm\string\classification.hpp(206) : see reference to function template instantiation 'boost::algorithm::detail::is_any_ofF<char>::is_any_ofF<boost::iterator_range<const char *>>(const RangeT &)' being compiled
                 with
                 [
                     RangeT=boost::iterator_range<const char *>
                 ]
                 c:\users\gabriel\documents\github\main\jarvis\jarvis\display.cpp(109) : see reference to function template instantiation 'boost::algorithm::detail::is_any_ofF<char> boost::algorithm::is_any_of<const char[2]>(RangeT (&))' being compiled
                 with
                 [
                     RangeT=const char [2]
                 ]
         Delete.cpp
     1>c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility(2132): warning C4996: 'std::_Copy_impl': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility(2113) : see declaration of 'std::_Copy_impl'
                 c:\boost\1.57.0\vc\11.0\boost\algorithm\string\detail\classification.hpp(102) : see reference to function template instantiation '_OutIt std::copy<const char*,char*>(_InIt,_InIt,_OutIt)' being compiled
                 with
                 [
                     _OutIt=char *
         ,            _InIt=const char *
                 ]
                 c:\boost\1.57.0\vc\11.0\boost\algorithm\string\classification.hpp(206) : see reference to function template instantiation 'boost::algorithm::detail::is_any_ofF<char>::is_any_ofF<boost::iterator_range<const char *>>(const RangeT &)' being compiled
                 with
                 [
                     RangeT=boost::iterator_range<const char *>
                 ]
                 c:\boost\1.57.0\vc\11.0\boost\algorithm\string\classification.hpp(206) : see reference to function template instantiation 'boost::algorithm::detail::is_any_ofF<char>::is_any_ofF<boost::iterator_range<const char *>>(const RangeT &)' being compiled
                 with
                 [
                     RangeT=boost::iterator_range<const char *>
                 ]
                 c:\users\gabriel\documents\github\main\jarvis\jarvis\delete.cpp(82) : see reference to function template instantiation 'boost::algorithm::detail::is_any_ofF<char> boost::algorithm::is_any_of<const char[2]>(RangeT (&))' being compiled
                 with
                 [
                     RangeT=const char [2]
                 ]
         CommandType.cpp
         Clear.cpp
         Add.cpp
         Generating Code...
     1>c:\users\gabriel\documents\github\main\jarvis\jarvis\logic.cpp(38): warning C4715: 'Logic::isLastCommandDone' : not all control paths return a value
     1>c:\users\gabriel\documents\github\main\jarvis\jarvis\update.cpp(320): warning C4715: 'Update::checkByTime' : not all control paths return a value
       Link:
         C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\bin\link.exe /ERRORREPORT:PROMPT /OUT:"C:\Users\Gabriel\Documents\GitHub\main\Jarvis\Debug\Jarvis.exe" /INCREMENTAL /NOLOGO winmm.lib kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib /MANIFEST /MANIFESTUAC:"level='asInvoker' uiAccess='false'" /manifest:embed /DEBUG /PDB:"C:\Users\Gabriel\Documents\GitHub\main\Jarvis\Debug\Jarvis.pdb" /TLBID:1 /DYNAMICBASE /NXCOMPAT /IMPLIB:"C:\Users\Gabriel\Documents\GitHub\main\Jarvis\Debug\Jarvis.lib" /MACHINE:X86 Debug\Add.obj
         Debug\Clear.obj
         Debug\CommandType.obj
         Debug\Delete.obj
         Debug\Display.obj
         Debug\Done.obj
         Debug\Log.obj
         Debug\Logic.obj
         Debug\Main.obj
         Debug\parser.obj
         Debug\RecurringTask.obj
         Debug\Search.obj
         Debug\Task.obj
         Debug\UI.obj
         Debug\Storage.obj
         Debug\Undo.obj
         Debug\Update.obj
         Debug\WrongFormatCommand.obj
         Jarvis.vcxproj -> C:\Users\Gabriel\Documents\GitHub\main\Jarvis\Debug\Jarvis.exe
     1>Done Building Project "C:\Users\Gabriel\Documents\GitHub\main\Jarvis\Jarvis\Jarvis.vcxproj" (Rebuild target(s)).

Build succeeded.

Time Elapsed 00:00:35.74
